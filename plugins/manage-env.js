//---------------------------------------------------------------------------
//           YOANN-XMD  
//---------------------------------------------------------------------------
//  ‚ö†Ô∏è DO NOT MODIFY THIS FILE ‚ö†Ô∏è  
//---------------------------------------------------------------------------
const { cmd, commands } = require('../command');
const config = require('../config');
const prefix = config.PREFIX;
const fs = require('fs');
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, sleep, fetchJson } = require('../lib/functions2');
const { writeFileSync } = require('fs');
const path = require('path');
const os = require('os');
const { exec } = require('child_process');
const axios = require('axios');
const FormData = require('form-data');
const { setConfig, getConfig } = require("../lib/configdb");

// SET BOT IMAGE
cmd({
  pattern: "setbotimage",
  alias: ["botdp", "botpic", "botimage", "setbotimg"],
  desc: "Set the bot's image URL",
  category: "owner",
  react: "‚úÖ",
  filename: __filename
}, async (conn, mek, m, { args, isCreator, reply }) => {
  try {
    if (!isCreator) return reply("‚ùó ·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.");

    let imageUrl = args[0];

    // Upload image if replying to one
    if (!imageUrl && m.quoted) {
      const quotedMsg = m.quoted;
      const mimeType = (quotedMsg.msg || quotedMsg).mimetype || '';
      if (!mimeType.startsWith("image")) return reply("‚ùå ·¥ò ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä…¥ …™·¥ç·¥Ä…¢·¥á.");

      const mediaBuffer = await quotedMsg.download();
      const extension = mimeType.includes("jpeg") ? ".jpg" : ".png";
      const tempFilePath = path.join(os.tmpdir(), `botimg_${Date.now()}${extension}`);
      fs.writeFileSync(tempFilePath, mediaBuffer);

      const form = new FormData();
      form.append("fileToUpload", fs.createReadStream(tempFilePath), `botimage${extension}`);
      form.append("reqtype", "fileupload");

      const response = await axios.post("https://catbox.moe/user/api.php", form, {
        headers: form.getHeaders()
      });

      fs.unlinkSync(tempFilePath);

      if (typeof response.data !== 'string' || !response.data.startsWith('https://')) {
        throw new Error(`Catbox upload failed: ${response.data}`);
      }

      imageUrl = response.data;
    }

    if (!imageUrl || !imageUrl.startsWith("http")) {
      return reply("‚ùå Provide a valid image URL or reply to an image.");
    }

    await setConfig("MENU_IMAGE_URL", imageUrl);

    await reply(`‚úÖ  ô·¥è·¥õ …™·¥ç·¥Ä…¢·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö.\n\n*…¥·¥á·¥° ·¥ú Ä ü:* ${imageUrl}\n\n‚ôªÔ∏è  Ä·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢...`);
    setTimeout(() => exec("pm2 restart all"), 2000);

  } catch (err) {
    console.error(err);
    reply(`‚ùå Error: ${err.message || err}`);
  }
});

// SET PREFIX
cmd({
  pattern: "setprefix",
  alias: ["prefix", "prifix"],
  desc: "Set the bot's command prefix",
  category: "owner",
  react: "‚úÖ",
  filename: __filename
}, async (conn, mek, m, { args, isCreator, reply }) => {
  if (!isCreator) return reply("‚ùó ·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.");
  const newPrefix = args[0]?.trim();
  if (!newPrefix || newPrefix.length > 2) return reply("‚ùå ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥ò Ä·¥á“ì…™x (1‚Äì2 ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs).");

  await setConfig("PREFIX", newPrefix);

  await reply(`‚úÖ ·¥ò Ä·¥á“ì…™x ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö ·¥õ·¥è: *${newPrefix}*\n\n‚ôªÔ∏è  Ä·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢...`);
  setTimeout(() => exec("pm2 restart all"), 2000);
});




cmd({
    pattern: "admin-events",
    alias: ["adminevents"],
    desc: "Enable or disable admin event notifications",
    category: "settings",
    filename: __filename
},
async (conn, mek, m, { from, args, isOwner, reply }) => {
    if (!isOwner) return reply("*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    const status = args[0]?.toLowerCase();
    if (status === "on") {
        config.ADMIN_EVENTS = "true";
        return reply("‚úÖ ·¥Ä·¥Ö·¥ç…™…¥ ·¥á·¥†·¥á…¥·¥õ …¥·¥è·¥õ…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥s ·¥Ä Ä·¥á …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.");
    } else if (status === "off") {
        config.ADMIN_EVENTS = "false";
        return reply("‚ùå ·¥Ä·¥Ö·¥ç…™…¥ ·¥á·¥†·¥á…¥·¥õ …¥·¥è·¥õ…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥s ·¥Ä Ä·¥á …¥·¥è·¥° ·¥Ö…™.");
    } else {
        return reply(`Example: .·¥Ä·¥Ö·¥ç…™…¥-·¥á·¥†·¥á…¥·¥õs ·¥è…¥`);
    }
});

cmd({
    pattern: "welcome",
    alias: ["welcomeset"],
    desc: "Enable or disable welcome messages for new members",
    category: "settings",
    filename: __filename
},
async (conn, mek, m, { from, args, isOwner, reply, isCreator, isDev }) => {
    if (!isOwner) return reply("*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    const status = args[0]?.toLowerCase();
    if (status === "on") {
        config.WELCOME = "true";
        return reply("‚úÖ  ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥ás ·¥Ä Ä·¥á …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.");
    } else if (status === "off") {
        config.WELCOME = "false";
        return reply("‚ùå ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥ás ·¥Ä Ä·¥á …¥·¥è·¥° ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö.");
    } else {
        return reply(`Example: .welcome on`);
    }
});



cmd({
    pattern: "mode",
    alias: ["setmode"],
    react: "ü´ü",
    desc: "Set bot mode to private or public.",
    category: "settings",
    filename: __filename,
}, async (conn, mek, m, { from, args, isOwner, reply }) => {
    if (!isOwner) return reply("*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    // Si aucun argument n'est fourni, afficher le mode actuel et l'usage
    if (!args[0]) {
        return reply(`üìå Current mode: *${config.MODE}*\n\n·¥ús·¥Ä…¢·¥á: .·¥ç·¥è·¥Ö·¥á ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á ·¥è Ä .·¥ç·¥è·¥Ö·¥á ·¥ò·¥ú ô ü…™·¥Ñ`);
    }

    const modeArg = args[0].toLowerCase();

    if (modeArg === "private") {
        config.MODE = "private";
        return reply("‚úÖ   ô·¥è·¥õ ·¥ç·¥è·¥Ö·¥á …™Íú± …¥·¥è·¥° Íú±·¥á·¥õ ·¥õ·¥è *·¥© Ä…™·¥†·¥Ä·¥õ·¥á*.");
    } else if (modeArg === "public") {
        config.MODE = "public";
        return reply("‚úÖ  ô·¥è·¥õ ·¥ç·¥è·¥Ö·¥á …™s …¥·¥è·¥° s·¥á·¥õ ·¥õ·¥è *·¥ò·¥ú ô ü…™·¥Ñ*.");
    } else {
        return reply("‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥ç·¥è·¥Ö·¥á. ·¥ò ü·¥á·¥Äs·¥á ·¥ús·¥á `.·¥ç·¥è·¥Ö·¥á ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á` ·¥è Ä `.·¥ç·¥è·¥Ö·¥á ·¥ò·¥ú ô ü…™·¥Ñ`.");
    }
});

cmd({
    pattern: "auto-typing",
    alias: ["autotyping"],
    description: "Enable or disable auto-typing feature.",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isOwner, reply }) => {
    if (!isOwner) return reply("*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    const status = args[0]?.toLowerCase();
    if (!["on", "off"].includes(status)) {
        return reply("*ü´ü ·¥áx·¥Ä·¥ç·¥ò ü·¥á:  .·¥Ä·¥ú·¥õ·¥è-·¥õ è·¥ò…™…¥…¢ ·¥è…¥*");
    }

    config.AUTO_TYPING = status === "on" ? "true" : "false";
    return reply(`·¥Ä·¥ú·¥õ·¥è ·¥õ è·¥ò…™…¥…¢  ú·¥Äs  ô·¥á·¥á…¥ ·¥õ·¥ú Ä…¥·¥á·¥Ö ${status}.`);
});

//mention reply 


cmd({
    pattern: "mention-reply",
    alias: ["menetionreply", "mee"],
    description: "Set bot status to always online or offline.",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isOwner, reply }) => {
    if (!isOwner) return reply("*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    const status = args[0]?.toLowerCase();
    // Check the argument for enabling or disabling the anticall feature
    if (args[0] === "on") {
        config.MENTION_REPLY = "true";
        return reply("·¥ç·¥á…¥·¥õ…™·¥è…¥  Ä·¥á·¥ò ü è “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.");
    } else if (args[0] === "off") {
        config.MENTION_REPLY = "false";
        return reply("·¥ç·¥á…¥·¥õ…™·¥è…¥  Ä·¥á·¥ò ü è “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á …™s …¥·¥è·¥° ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö.");
    } else {
        return reply(`_example:  .·¥ç·¥á·¥á ·¥è…¥_`);
    }
});


//--------------------------------------------
// ALWAYS_ONLINE COMMANDS
//--------------------------------------------
cmd({
    pattern: "always-online",
    alias: ["alwaysonline"],
    desc: "Enable or disable the always online mode",
    category: "settings",
    filename: __filename
},
async (conn, mek, m, { from, args, isOwner, reply }) => {
    if (!isOwner) return reply("*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    const status = args[0]?.toLowerCase();
    if (status === "on") {
        config.ALWAYS_ONLINE = "true";
        await reply("*‚úÖ ·¥Ä ü·¥°·¥Ä ès ·¥è…¥ ü…™…¥·¥á ·¥ç·¥è·¥Ö·¥á …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.*");
    } else if (status === "off") {
        config.ALWAYS_ONLINE = "false";
        await reply("*‚ùå ·¥Ä ü·¥°·¥Ä ès ·¥è…¥ ü…™…¥·¥á ·¥ç·¥è·¥Ö·¥á …™s …¥·¥è·¥° ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö.*");
    } else {
        await reply(`*üõ†Ô∏è ·¥áx·¥Ä·¥ç·¥ò ü·¥á: .·¥Ä ü·¥°·¥Ä ès-·¥è…¥ ü…™…¥·¥á ·¥è…¥*`);
    }
});

//--------------------------------------------
//  AUTO_RECORDING COMMANDS
//--------------------------------------------
cmd({
    pattern: "auto-recording",
    alias: ["autorecoding"],
    description: "Enable or disable auto-recording feature.",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isOwner, reply }) => {
    if (!isOwner) return reply("*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    const status = args[0]?.toLowerCase();
    if (!["on", "off"].includes(status)) {
        return reply("*ü´ü ·¥áx·¥Ä·¥ç·¥ò ü·¥á: .·¥Ä·¥ú·¥õ·¥è- Ä·¥á·¥Ñ·¥è Ä·¥Ö…™…¥…¢ ·¥è…¥*");
    }

    config.AUTO_RECORDING = status === "on" ? "true" : "false";
    if (status === "on") {
        await conn.sendPresenceUpdate("recording", from);
        return reply("·¥Ä·¥ú·¥õ·¥è  Ä·¥á·¥Ñ·¥è Ä·¥Ö…™…¥…¢ …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.  ô·¥è·¥õ …™s  Ä·¥á·¥Ñ·¥è Ä·¥Ö…™…¥…¢...");
    } else {
        await conn.sendPresenceUpdate("available", from);
        return reply("·¥Ä·¥ú·¥õ·¥è  Ä·¥á·¥Ñ·¥è Ä·¥Ö…™…¥…¢  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö.");
    }
});
//--------------------------------------------
// AUTO_VIEW_STATUS COMMANDS
//--------------------------------------------
cmd({
    pattern: "auto-seen",
    alias: ["autostatusview"],
    desc: "Enable or disable auto-viewing of statuses",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isOwner, reply }) => {
    if (!isOwner) return reply("*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    const status = args[0]?.toLowerCase();
    // Default value for AUTO_VIEW_STATUS is "false"
    if (args[0] === "on") {
        config.AUTO_STATUS_SEEN = "true";
        return reply("·¥Ä·¥ú·¥õ·¥è-·¥†…™·¥á·¥°…™…¥…¢ ·¥è“ì s·¥õ·¥Ä·¥õ·¥ús·¥ás …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.");
    } else if (args[0] === "off") {
        config.AUTO_STATUS_SEEN = "false";
        return reply("·¥Ä·¥ú·¥õ·¥è-·¥†…™·¥á·¥°…™…¥…¢ ·¥è“ì s·¥õ·¥Ä·¥õ·¥ús·¥ás …™s …¥·¥è·¥° ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö.");
    } else {
        return reply(`*ü´ü ·¥áx·¥Ä·¥ç·¥ò ü·¥á:  .·¥Ä·¥ú·¥õ·¥è-s·¥á·¥á…¥ ·¥è…¥*`);
    }
}); 
//--------------------------------------------
// AUTO_LIKE_STATUS COMMANDS
//--------------------------------------------
cmd({
    pattern: "status-react",
    alias: ["statusreact", "autoreactstatus", "auto-status-react"],
    desc: "Enable or disable auto-liking of statuses",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isOwner, reply }) => {
    if (!isOwner) return reply("*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    const status = args[0]?.toLowerCase();
    // Default value for AUTO_LIKE_STATUS is "false"
    if (args[0] === "on") {
        config.AUTO_STATUS_REACT = "true";
        return reply("·¥Ä·¥ú·¥õ·¥è- ü…™·¥ã…™…¥…¢ ·¥è“ì s·¥õ·¥Ä·¥õ·¥ús·¥ás is …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.");
    } else if (args[0] === "off") {
        config.AUTO_STATUS_REACT = "false";
        return reply("·¥Ä·¥ú·¥õ·¥è- ü…™·¥ã…™…¥…¢ ·¥è“ì s·¥õ·¥Ä·¥õ·¥ús·¥ás …™s …¥·¥è·¥° ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö.");
    } else {
        return reply(`Example: . s·¥õ·¥Ä·¥õ·¥ús- Ä·¥á·¥Ä·¥Ñ·¥õ ·¥è…¥`);
    }
});

//--------------------------------------------
//  READ-MESSAGE COMMANDS
//--------------------------------------------
cmd({
    pattern: "read-message",
    alias: ["autoread"],
    desc: "enable or disable readmessage.",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isOwner, reply }) => {
    if (!isOwner) return reply("*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    const status = args[0]?.toLowerCase();
    // Check the argument for enabling or disabling the anticall feature
    if (args[0] === "on") {
        config.READ_MESSAGE = "true";
        return reply(" Ä·¥á·¥Ä·¥Ö·¥ç·¥áss·¥Ä…¢·¥á “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.");
    } else if (args[0] === "off") {
        config.READ_MESSAGE = "false";
        return reply(" Ä·¥á·¥Ä·¥Ö·¥ç·¥áss·¥Ä…¢·¥á “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á …™s …¥·¥è·¥° ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö.");
    } else {
        return reply(`_·¥áx·¥Ä·¥ç·¥ò ü·¥á:  . Ä·¥á·¥Ä·¥Ö·¥ç·¥áss·¥Ä…¢·¥á ·¥è…¥_`);
    }
});



//--------------------------------------------
//  ANI-BAD COMMANDS
//--------------------------------------------
cmd({
    pattern: "anti-bad",
    alias: ["antibadword"],
    desc: "enable or disable antibad.",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isOwner, reply }) => {
    if (!isOwner) return reply("*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    const status = args[0]?.toLowerCase();
    // Check the argument for enabling or disabling the anticall feature
    if (args[0] === "on") {
        config.ANTI_BAD_WORD = "true";
        return reply("*anti bad word is now enabled.*");
    } else if (args[0] === "off") {
        config.ANTI_BAD_WORD = "false";
        return reply("*·¥Ä…¥·¥õ…™  ô·¥Ä·¥Ö ·¥°·¥è Ä·¥Ö “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á …™s …¥·¥è·¥° ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö*");
    } else {
        return reply(`_·¥áx·¥Ä·¥ç·¥ò ü·¥á:  .·¥Ä…¥·¥õ…™ ô·¥Ä·¥Ö ·¥è…¥_`);
    }
});

//--------------------------------------------
//   AUTO-REACT COMMANDS
//--------------------------------------------
cmd({
    pattern: "auto-react",
    alias: ["autoreact"],
    desc: "Enable or disable the autoreact feature",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isOwner, reply }) => {
    if (!isOwner) return reply("*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    const status = args[0]?.toLowerCase();
    // Check the argument for enabling or disabling the anticall feature
    if (args[0] === "on") {
        config.AUTO_REACT = "true";
        await reply("*·¥Ä·¥ú·¥õ·¥è Ä·¥á·¥Ä·¥Ñ·¥õ “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.*");
    } else if (args[0] === "off") {
        config.AUTO_REACT = "false";
        await reply("·¥Ä·¥ú·¥õ·¥è Ä·¥á·¥Ä·¥Ñ·¥õ “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á …™s …¥·¥è·¥° ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö.");
    } else {
        await reply(`*ü´ü ·¥áx·¥Ä·¥ç·¥ò ü·¥á: .·¥Ä·¥ú·¥õ·¥è- Ä·¥á·¥Ä·¥Ñ·¥õ ·¥è…¥*`);
    }
});
//--------------------------------------------
//  STATUS-REPLY COMMANDS
//--------------------------------------------
cmd({
    pattern: "status-reply",
    alias: ["autostatusreply"],
    desc: "enable or disable status-reply.",
    category: "settings",
    filename: __filename
},    
async (conn, mek, m, { from, args, isOwner, reply }) => {
    if (!isOwner) return reply("*üìõ ·¥è…¥ ü è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö!*");

    const status = args[0]?.toLowerCase();
    // Check the argument for enabling or disabling the anticall feature
    if (args[0] === "on") {
        config.AUTO_STATUS_REPLY = "true";
        return reply("s·¥õ·¥Ä·¥õ·¥ús- Ä·¥á·¥ò ü è “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.");
    } else if (args[0] === "off") {
        config.AUTO_STATUS_REPLY = "false";
        return reply("s·¥õ·¥Ä·¥õ·¥ús- Ä·¥á·¥ò ü è “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á …™s …¥·¥è·¥° ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö.");
    } else {
        return reply(`*ü´ü ·¥áx·¥Ä·¥ç·¥ò ü·¥á:  .s·¥õ·¥Ä·¥õ·¥ús- Ä·¥á·¥ò ü è ·¥è…¥*`);
    }
});

//--------------------------------------------
//  ANTILINK COMMANDS
//--------------------------------------------

cmd({
  pattern: "antilink",
  alias: ["antilinks"],
  desc: "Enable or disable ANTI_LINK in groups",
  category: "group",
  react: "üö´",
  filename: __filename
}, async (conn, mek, m, { isGroup, isAdmins, isBotAdmins, args, reply }) => {
  try {
    if (!isGroup) return reply('·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö can ·¥è…¥ ü è  ô·¥á ·¥ús·¥á·¥Ö …™…¥ ·¥Ä …¢ Ä·¥è·¥ú·¥ò.');
    if (!isBotAdmins) return reply(' ô·¥è·¥õ ·¥ç·¥ús·¥õ  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ to use ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.');
    if (!isAdmins) return reply(' è·¥è·¥ú ·¥ç·¥ús·¥õ  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.');

    if (args[0] === "on") {
      config.ANTI_LINK = "true";
      reply("‚úÖ ·¥Ä…¥·¥õ…™_ ü…™…¥·¥ã  ú·¥Äs  ô·¥á·¥á…¥ ·¥á…¥·¥Ä ô ü·¥á·¥Ö.");
    } else if (args[0] === "off") {
      config.ANTI_LINK = "false";
      reply("‚ùå ·¥Ä…¥·¥õ…™_ ü…™…¥·¥ã  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö.");
    } else {
      reply("Usage: *.·¥Ä…¥·¥õ…™ ü…™…¥·¥ã ·¥è…¥/·¥è“ì“ì*");
    }
  } catch (e) {
    reply(`Error: ${e.message}`);
  }
});

cmd({
  pattern: "antilinkkick",
  alias: ["kicklink"],
  desc: "Enable or disable ANTI_LINK_KICK in groups",
  category: "group",
  react: "‚ö†Ô∏è",
  filename: __filename
}, async (conn, mek, m, { isGroup, isAdmins, isBotAdmins, args, reply }) => {
  try {
    if (!isGroup) return reply('This ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥ús·¥á·¥Ö …™…¥ ·¥Ä …¢ Ä·¥è·¥ú·¥ò.');
    if (!isBotAdmins) return reply('Bot ·¥ç·¥ús·¥õ  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.');
    if (!isAdmins) return reply('You ·¥ç·¥ús·¥õ  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.');

    if (args[0] === "on") {
      config.ANTI_LINK_KICK = "true";
      reply("‚úÖ ANTI_LINK_KICK has been enabled.");
    } else if (args[0] === "off") {
      config.ANTI_LINK_KICK = "false";
      reply("‚ùå ·¥Ä…¥·¥õ…™_ ü…™…¥·¥ã_·¥ã…™·¥Ñ·¥ã  ú·¥Äs  ô·¥á·¥á…¥ ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö.");
    } else {
      reply("Usage: *.·¥Ä…¥·¥õ…™ ü…™…¥·¥ã·¥ã…™·¥Ñ·¥ã ·¥è…¥/·¥è“ì“ì*");
    }
  } catch (e) {
    reply(`Error: ${e.message}`);
  }
});


cmd({
  pattern: "deletelink",
  alias: ["linksdelete"],
  desc: "Enable or disable DELETE_LINKS in groups",
  category: "group",
  react: "‚ùå",
  filename: __filename
}, async (conn, mek, m, { isGroup, isAdmins, isBotAdmins, args, reply }) => {
  try {
    if (!isGroup) return reply('This ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥ús·¥á·¥Ö …™…¥ a …¢ Ä·¥è·¥ú·¥ò.');
    if (!isBotAdmins) return reply('Bot ·¥ç·¥ús·¥õ  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.');
    if (!isAdmins) return reply('You ·¥ç·¥ús·¥õ  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.');

    if (args[0] === "on") {
      config.DELETE_LINKS = "true";
      reply("‚úÖ ·¥Ö·¥á ü·¥á·¥õ·¥á_ ü…™…¥·¥ãs …™s …¥·¥è·¥° ·¥á…¥·¥Ä ô ü·¥á·¥Ö.");
    } else if (args[0] === "off") {
      config.DELETE_LINKS = "false";
      reply("‚ùå ·¥Ö·¥á ü·¥á·¥õ·¥á_ ü…™…¥·¥ãs …™s …¥·¥è·¥° ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö.");
    } else {
      reply("Usage: *.·¥Ö·¥á ü·¥á·¥õ·¥á ü…™…¥·¥ã ·¥è…¥/·¥è“ì“ì*");
    }
  } catch (e) {
    reply(`Error: ${e.message}`);
  }
});
  
