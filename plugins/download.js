const { fetchJson } = require("../lib/functions");
const { downloadTiktok } = require("@mrnima/tiktok-downloader");
const { facebook } = require("@mrnima/facebook-downloader");
const cheerio = require("cheerio");
const axios = require("axios");
const { cmd, commands } = require('../command');



// twitter-dl

cmd({
  pattern: "twitter",
  alias: ["tweet", "twdl"],
  desc: "Download Twitter videos",
  category: "download",
  filename: __filename
}, async (conn, m, store, {
  from,
  quoted,
  q,
  reply
}) => {
  try {
    if (!q || !q.startsWith("https://")) {
      return conn.sendMessage(from, { text: "‚ùå ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥õ·¥°…™·¥õ·¥õ·¥á Ä ·¥ú Ä ü." }, { quoted: m });
    }

    await conn.sendMessage(from, {
      react: { text: '‚è≥', key: m.key }
    });

    const response = await axios.get(`https://www.dark-yasiya-api.site/download/twitter?url=${q}`);
    const data = response.data;

    if (!data || !data.status || !data.result) {
      return reply("‚ö†Ô∏è Failed to retrieve Twitter video. Please check the link and try again.");
    }

    const { desc, thumb, video_sd, video_hd } = data.result;

    const caption = `‚ï≠‚îÅ‚îÅ‚îÅ„Äî *ùêìùêñùêàùêìùêìùêÑùêë ùêÉùêéùêñùêçùêãùêéùêÄùêÉùêÑùêë* „Äï‚îÅ‚îÅ‚îÅ‚ä∑\n`
      + `‚îÉ‚ñ∏ *Description:* ${desc || "No description"}\n`
      + `‚ï∞‚îÅ‚îÅ‚îÅ‚™º\n\n`
      + `üìπ *·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥è·¥ò·¥õ…™·¥è…¥s:*\n`
      + `1Ô∏è‚É£  *s·¥Ö «´·¥ú·¥Ä ü…™·¥õ è*\n`
      + `2Ô∏è‚É£  * ú·¥Ö «´·¥ú·¥Ä ü…™·¥õ è*\n`
      + `üéµ *·¥Ä·¥ú·¥Ö…™·¥è ·¥è·¥ò·¥õ…™·¥è…¥s:*\n`
      + `3Ô∏è‚É£  *·¥Ä·¥ú·¥Ö…™·¥è*\n`
      + `4Ô∏è‚É£  *·¥Ö·¥è·¥Ñ·¥ú·¥ç·¥á…¥·¥õ*\n`
      + `5Ô∏è‚É£  *·¥†·¥è…™·¥Ñ·¥á*\n\n`
      + `üìå * Ä·¥á·¥ò ü è ·¥°…™·¥õ ú ·¥õ ú·¥á …¥·¥ú·¥ç ô·¥á Ä ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  è·¥è·¥ú Ä ·¥Ñ ú·¥è…™·¥Ñ·¥á.*`;

    const sentMsg = await conn.sendMessage(from, {
      image: { url: thumb },
      caption: caption
    }, { quoted: m });

    const messageID = sentMsg.key.id;

    conn.ev.on("messages.upsert", async (msgData) => {
      const receivedMsg = msgData.messages[0];
      if (!receivedMsg.message) return;

      const receivedText = receivedMsg.message.conversation || receivedMsg.message.extendedTextMessage?.text;
      const senderID = receivedMsg.key.remoteJid;
      const isReplyToBot = receivedMsg.message.extendedTextMessage?.contextInfo?.stanzaId === messageID;

      if (isReplyToBot) {
        await conn.sendMessage(senderID, {
          react: { text: '‚¨áÔ∏è', key: receivedMsg.key }
        });

        switch (receivedText) {
          case "1":
            await conn.sendMessage(senderID, {
              video: { url: video_sd },
              caption: "üì• *·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á·¥Ö …™…¥ *s·¥Ö «´·¥ú·¥Ä ü…™·¥õ è*"
            }, { quoted: receivedMsg });
            break;

          case "2":
            await conn.sendMessage(senderID, {
              video: { url: video_hd },
              caption: "üì• *·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á·¥Ö …™…¥  ú·¥Ö «´·¥ú·¥Ä ü…™·¥õ è*"
            }, { quoted: receivedMsg });
            break;

          case "3":
            await conn.sendMessage(senderID, {
              audio: { url: video_sd },
              mimetype: "audio/mpeg"
            }, { quoted: receivedMsg });
            break;

          case "4":
            await conn.sendMessage(senderID, {
              document: { url: video_sd },
              mimetype: "audio/mpeg",
              fileName: "Twitter_Audio.mp3",
              caption: "üì• *·¥Ä·¥ú·¥Ö…™·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á·¥Ö ·¥Äs ·¥Ö·¥è·¥Ñ·¥ú·¥ç·¥á…¥·¥õ*"
            }, { quoted: receivedMsg });
            break;

          case "5":
            await conn.sendMessage(senderID, {
              audio: { url: video_sd },
              mimetype: "audio/mp4",
              ptt: true
            }, { quoted: receivedMsg });
            break;

          default:
            reply("‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥è·¥ò·¥õ…™·¥è…¥! ·¥ò ü·¥á·¥Äs·¥á  Ä·¥á·¥ò ü è ·¥°…™·¥õ ú 1, 2, 3, 4, or 5.");
        }
      }
    });

  } catch (error) {
    console.error("Error:", error);
    reply("‚ùå An error occurred while processing your request. Please try again.");
  }
});

// MediaFire-dl

cmd({
  pattern: "mediafire",
  alias: ["mfire"],
  desc: "To download MediaFire files.",
  react: "üé•",
  category: "download",
  filename: __filename
}, async (conn, m, store, {
  from,
  quoted,
  q,
  reply
}) => {
  try {
    if (!q) {
      return reply("‚ùå Please provide a valid MediaFire link.");
    }

    await conn.sendMessage(from, {
      react: { text: "‚è≥", key: m.key }
    });

    const response = await axios.get(`https://www.dark-yasiya-api.site/download/mfire?url=${q}`);
    const data = response.data;

    if (!data || !data.status || !data.result || !data.result.dl_link) {
      return reply("‚ö†Ô∏è Failed to fetch MediaFire download link. Ensure the link is valid and public.");
    }

    const { dl_link, fileName, fileType } = data.result;
    const file_name = fileName || "mediafire_download";
    const mime_type = fileType || "application/octet-stream";

    await conn.sendMessage(from, {
      react: { text: "‚¨ÜÔ∏è", key: m.key }
    });

    const caption = `‚ï≠‚îÅ‚îÅ‚îÅ„Äî *ùêåùêÑùêÉùêàùêÄùêÖùêàùêëùêÑ ùêÉùêéùêñùêçùêãùêéùêÄùêÉùêÑùêë* „Äï‚îÅ‚îÅ‚îÅ‚ä∑\n`
      + `‚îÉ‚ñ∏ *“ì…™ ü·¥á …¥·¥Ä·¥ç·¥á:* ${file_name}\n`
      + `‚îÉ‚ñ∏ *“ì…™ ü·¥á ·¥õ è·¥ò·¥á:* ${mime_type}\n`
      + `‚ï∞‚îÅ‚îÅ‚îÅ‚™º\n\n`
      + `üì• *·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢  è·¥è·¥ú Ä “ì…™ ü·¥á...*`;

    await conn.sendMessage(from, {
      document: { url: dl_link },
      mimetype: mime_type,
      fileName: file_name,
      caption: caption
    }, { quoted: m });

  } catch (error) {
    console.error("Error:", error);
    reply("‚ùå An error occurred while processing your request. Please try again.");
  }
});

// apk-dl

cmd({
  pattern: "apk",
  desc: "Download APK from Aptoide.",
  category: "download",
  filename: __filename
}, async (conn, m, store, {
  from,
  quoted,
  q,
  reply
}) => {
  try {
    if (!q) {
      return reply("‚ùå Please provide an app name to search.");
    }

    await conn.sendMessage(from, { react: { text: "‚è≥", key: m.key } });

    const apiUrl = `http://ws75.aptoide.com/api/7/apps/search/query=${q}/limit=1`;
    const response = await axios.get(apiUrl);
    const data = response.data;

    if (!data || !data.datalist || !data.datalist.list.length) {
      return reply("‚ö†Ô∏è No results found for the given app name.");
    }

    const app = data.datalist.list[0];
    const appSize = (app.size / 1048576).toFixed(2); // Convert bytes to MB

    const caption = `‚ï≠‚îÅ‚îÅ‚îÅ„Äî *ùêÄùêèùêä ùêÉùêéùêñùêçùêãùêéùêÄùêÉùêÑùêë* „Äï‚îÅ‚îÅ‚îÅ‚îà‚ä∑
‚îÉ üì¶ *…¥·¥Ä·¥ç·¥á:* ${app.name}
‚îÉ üèã *s…™·¥¢·¥á:* ${appSize} MB
‚îÉ üì¶ *·¥ò·¥Ä·¥Ñ·¥ã·¥Ä…¢·¥á:* ${app.package}
‚îÉ üìÖ *·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö ·¥è…¥:* ${app.updated}
‚îÉ üë®‚Äçüíª *·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä:* ${app.developer.name}
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îà‚ä∑
> *·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö·¥á·¥†  è·¥è·¥Ä…¥…¥*`;

    await conn.sendMessage(from, { react: { text: "‚¨ÜÔ∏è", key: m.key } });

    await conn.sendMessage(from, {
      document: { url: app.file.path_alt },
      fileName: `${app.name}.apk`,
      mimetype: "application/vnd.android.package-archive",
      caption: caption
    }, { quoted: m });

    await conn.sendMessage(from, { react: { text: "‚úÖ", key: m.key } });

  } catch (error) {
    console.error("Error:", error);
    reply("‚ùå An error occurred while fetching the APK. Please try again.");
  }
});

// G-Drive-DL

cmd({
  pattern: "gdrive",
  desc: "Download Google Drive files.",
  react: "üåê",
  category: "download",
  filename: __filename
}, async (conn, m, store, {
  from,
  quoted,
  q,
  reply
}) => {
  try {
    if (!q) {
      return reply("‚ùå ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö …¢·¥è·¥è…¢ ü·¥á ·¥Ö Ä…™·¥†·¥á  ü…™…¥·¥ã.");
    }

    await conn.sendMessage(from, { react: { text: "‚¨áÔ∏è", key: m.key } });

    const apiUrl = `https://api.fgmods.xyz/api/downloader/gdrive?url=${q}&apikey=mnp3grlZ`;
    const response = await axios.get(apiUrl);
    const downloadUrl = response.data.result.downloadUrl;

    if (downloadUrl) {
      await conn.sendMessage(from, { react: { text: "‚¨ÜÔ∏è", key: m.key } });

      await conn.sendMessage(from, {
        document: { url: downloadUrl },
        mimetype: response.data.result.mimetype,
        fileName: response.data.result.fileName,
        caption: "> *·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö·¥á·¥†  è·¥è·¥Ä…¥…¥*"
      }, { quoted: m });

      await conn.sendMessage(from, { react: { text: "‚úÖ", key: m.key } });
    } else {
      return reply("‚ö†Ô∏è No download URL found. Please check the link and try again.");
    }
  } catch (error) {
    console.error("Error:", error);
    reply("‚ùå An error occurred while fetching the Google Drive file. Please try again.");
  }
}); 

                                   
